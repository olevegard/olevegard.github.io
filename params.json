{"name":"DX Ball","tagline":"An attempt at a DX Ball clone","body":"Hello and welcome to this weird place where I am writing to none other than myself!\r\n\r\nFirst of all, I'd like to say that the name is not final, I just haven't figured out a clever name for it yet. Maybe I never will. \r\n\r\nAs you probably have guessed by now, this game draws a lot of inspiration from DX Ball. The reason I choose to do a DX Ball remake is that it's quite easy to make. I have tried making more complex games earlier, and failed. So I think DX Ball is a fitting one-person challenge. \r\n\r\n# Technology\r\nAs for technology, this game will be written almost entirely in C++11¹. The code is to remain platform-independent². \r\n\r\nWhen it comes to third party libraries, only `SDL2.0` will be used. With the possible addition of `OpenGL` later on. But since `SDL2.0` already uses `OpenGL`, it might not be necessary.\r\n\r\n# Coding standards\r\nThe coding standards at this project is yet to be properly defined. However, there are a few rules.\r\n## Stylistic \r\n* Always put angle brackets ( `{` and `}` )\r\n* Function names starts with uppercase letters and uses camel case. Underscore is permitted in some cases.\r\n* Variable names start with a lowercase letter, and uses camel case. Underscore is permitted in some cases.\r\n* (System³) Hungarian notation is not permitted.\r\n\r\n## General\r\n* The code is to be compiled with `./buildDXB.h`. ANY warnings that occurs are to be fixed properly. \r\n* As far as possible, prevent the use of this to assign variables etc. \r\n* People are permitted to kick anyone who uses a macro\r\n* Cost are to be applied to variables passed by reference and functions whenever possible. \r\n* Functions are not to be longer than one screen length unless you have a really good reason.\r\n* Use proper names for variables and functions. Long names is not an issue, unless it's approaching 80 chars\r\n* DON'T REPEAT YOURSELF.\r\n* Keep things simple, don't rely on clever/ heavily optimized functions. \r\n* Rather than writing own code, functionality in the `standard C++ library` should be used.\r\n\r\nFollowing the above rules, there will be more code to write. But your code will require less comments and will be easier to understand and debug. ( Anyone who claims they don't produce bugs are liars. )\r\n\r\n\r\n\r\n¹ If the game is ever ported to work on `iPhone/iPad`, the code might have to be ported to Objective `C++(11)` <br/>\r\n² As of now, the code only works on `Linux`, this is due to lack of timing functions. But it'll be easy to port the `Timer` class to `Windows`<br/>\r\n³ http://en.wikipedia.org/wiki/Hungarian_notation#Systems_vs._Apps_Hungarian.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}